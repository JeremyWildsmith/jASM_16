
.equ VIDEO_RAM 0x8000
.equ SCREEN_ID_LOW 0xf615
.equ SCREEN_ID_HI 0x7349

; 0x12d0b402
.equ CLOCK_ID_LOW 0xb402
.equ CLOCK_ID_HI 0x12d0

; ffffbbbbBccccccc
.equ FOREGROUND 1<< 12
.equ BACKGROUND 0

.equ SCREEN_COLS 32
.equ SCREEN_ROWS 12

; preable
   JSR init_hardware
   IFE [screen_slot] , 0xffff ; no screen ??
   SET PC , crash
   IFE [clock_slot] , 0xffff
   SET PC , crash
   SET pc , main

crash:   SET  PC , crash

; =========================================
; =================== main program ============
; =========================================

main:
; screen found , draw some stuff
    SET a, text
    JSR print_offscreen
    jsr setup_clock
    IAS interrupt_handler ; enable interrupts
stop:
    SET PC , stop

:setup_clock
           SET b,1
           SET a,2
           HWI [clock_slot] ; turn on clock interrupts with msg 1
           SET b,60
           SET a,0
           HWI [clock_slot] ; let clock tick 60/60 = once per second
           SET PC , POP

:interrupt_handler
           jsr scroll_down
; cycle screen color
           SET b , [border_color]
           ADD b , 1
           MOD b , 15
           SET [border_color],b
           SET a,3
           HWI [screen_slot]
           RFI 0

; =========================================
; =================== scroll screen =============
; =========================================

scroll_down:
            SET x , SCREEN_ROWS ; number of rows to scroll
            SET y, VIDEO_RAM+((SCREEN_ROWS - 1)*SCREEN_COLS ); number of words per row            
scroll_loop:
            SUB y , SCREEN_COLS
            SET i ,y
            SET j,y
            ADD j , SCREEN_COLS 
            jsr scroll_row
            SUB x , 1
            IFN x , 0
            SET PC , scroll_loop
            JSR clear_offscreen_buffer
            SET PC , POP ; return            

; expects i to point to the start of a row and j to point to the start of the next row
scroll_row:
            SET a , SCREEN_COLS - 1
copy_loop:
            STI [j] ,[i]
            SUB a,1
            IFN a, 0
            SET PC , copy_loop
            SET PC , POP  

; clears offscreen buffer (row -1)

clear_offscreen_buffer:
            SET a,SCREEN_COLS - 1
            SET i , VIDEO_RAM - SCREEN_COLS
clear_loop:
             SET [i] , 0
             ADD i,1
             SUB a , 1
             IFN a,0
             SET pc , clear_loop
             SET PC , POP          
            
; ==============================================
; =================== hardware initialization =============
; ==============================================

init_hardware:
   HWN i
detection_loop:
   IFE 0,i
   SET PC,POP
   SUB i,1
   HWQ i
   IFE a, SCREEN_ID_LOW ; A+(B<<16) is a 32 bit word identifying the hardware id
   IFE b, SCREEN_ID_HI
   SET PC , screen_found
   IFE a, CLOCK_ID_LOW ; A+(B<<16) is a 32 bit word identifying the hardware id
   IFE b, CLOCK_ID_HI
   SET PC , clock_found
   SET PC , detection_loop

:screen_found
; hw slot # is in I
    SET [screen_slot],i
    SET a,0  ; map VRAM
    SET b , 0x8000
    HWI [screen_slot] ; map VRAM to 0x8000
    SET PC , detection_loop

:clock_found
; hw slot # is in I
    SET [clock_slot],i
    SET PC , detection_loop

no_screen:
    SET i,-1
    SET PC , POP

:print_offscreen
    SET b,VIDEO_RAM-SCREEN_COLS
printchars:
    IFE [a] , 0
    SET PC , POP
    SET c , [a]
    BOR c , FOREGROUND
    BOR c , BACKGROUND
    SET [b] , c
    ADD b,1
    ADD a,1
    SET PC,printchars
       
:border_color .dat 0
:screen_slot .dat 0xffff
:clock_slot .dat 0xffff

:text             .dat "test",0